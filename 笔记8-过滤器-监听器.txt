1、过滤器
	(1)什么是过滤器？
		servlet规范当中定义的一种特殊的组件，可以拦截servlet容器的调用过程并进行相应的处理。
	(2)如何编写过滤器？
		a、写一个java类，实现Filter接口。
		b、在doFilter方法里面编写处理逻辑。
		c、配置过滤器.
	(3)过滤器的优先级
		如果有多个过滤器都满足过滤的条件，则容器会依据<filter-mapping>的先后顺序来调用过滤器。
	(4)初始化过滤器参数
		a、使用<init-param>配置初始化参数
		b、调用FilterConfig.getInitParameter(String paramName);获取过滤器初始化参数
	(5)优点
		a、可以实现代码的"可插拔性"(增加或者减少某个模块，不会影响程序代码的运行)
		b、可以将多个组件相同的处理逻辑几种写在过滤器里面，方便代码的维护。

2、监听器
	(1)什么是监听器
		servlet规范当中定义的一种特殊的组件，用来监听容器产生的事件并进行处理。
		容器会产生两大类事件：
			a、生命周期相关的事件：容器在创建或者销毁request，session，ServletContext(servlet上下文)时产生的事件。
			b、绑定相关的事件：容器调用了request,session,ServletContext的setAttribute，removeAttribute时产生的事件。
	(2)如何编写一个监听器
		a、编写一个java类，实现监听器接口(依据监听的事件类型来选择对应的接口)
		b、在监听器接口定义的方法里面，编写处理逻辑。
		c、配置监听器。
	(3)ServletContext
		a、容器在启动的时候，会为每一个应用创建唯一的一个符合ServletContext接口要求的对象(Servlet上下文)，该对象会一直存在，除非容器关闭。
		b、如何获得Servlet上下文
			b1、GenericServlet.getServletContext();
			b2、HttpSession.getServletContext();
			b3、ServletConfig.getServletContext();
			b4、FilterConfig.getServletContext();
		c、作用
			c1、绑定数据
				setAttribute，removeAttribute，getAttribute
				request,session,servletContext都提供了绑定数据相关的三个方法，如果都满足使用的条件，应该优先使用生命周期短的(request < session < servletContext)
				request对象上绑定的数据只有同一个请求所涉及的各个web组件可以共享，比如：
					1)、一个servlet将数据绑定到request，然后转发到一个jsp。请求先交给过滤器来处理，然后调用servlet。
					2)、session对象上绑定的数据是同一个会话所涉及的各个web组件可以共享。
					3)、ServletContext绑定的数据是公开的，都可以访问，而且随时可以访问。
			c2、访问全局的初始化参数
				即使用<context-param></context-param>配置的初始化参数，可以被用一个应用中的所有servlet，filter共享。
					String getInitParameter(String paramName);
			c3、依据逻辑路径(path)获得实际部署时的物理路径
				String getRealPath(String path);

3、上传文件(扩展)
	a、给表单设置enctype="multipart/form-data"(这是http协议的要求)，并且表单只能使用post方式来提交。
	b、在服务器端，不能够使用request.getParameter方法，就算得到了也是null值。此时需要调用request.getInputStream获得一个InputStream，然后分析流来获得数据。一般使用一些工具来分析这个流(比如，apache提供的file-upload.jar)