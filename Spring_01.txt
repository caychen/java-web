要求：
	掌握Spring框架容器的使用
	掌握Spring框架IOC特性的使用
	掌握Spring框架AOP特性的使用
	掌握Spring如何整合JDBC，Hibernate技术
	掌握Spring如何整合Struts2
	掌握Spring如何进行事务管理
------------------------------------------

1、Spring框架作用和优点
	Spring框架主要负责技术整合，该框架提供了IOC和AOP机制，基于这些特性整合，可以降低系统组件之间的耦合度，便于系统组件的维护、扩展和替换。

	在SSH框架中，主要是利用Spring容器管理程序中的Action，DAO等组件，通过容器的IOC和AOP机制，利用这些特性可以降低Action和DAO之间的关联，利用AOP进行事务管理等共通部分处理。

2、Spring框架的容器
	Spring框架的核心是提供了一个容器，该容器类型是BeanFactory或者ApplicationContext。
		a、容器可以创建和销毁组件对象，等价于原来的工厂作用。
		b、容器可以采用不同模式创建对象。
		c、容器具有IOC机制实现。
		d、容器具有AOP机制实现。

3、Spring基本应用
	1)如何将一个Bean组件交给Spring容器？
		方法：在applicationContext.xml中添加以下定义
		<bean id="标识符" class="Bean组件类型，完整包名和类名"></bean>

	2)如何获取Spring容器对象？
		ApplicationContext ac = new ClassPathXmlApplicationContext("/applicationContext.xml");
		利用ac.getBean("标识符");方法获取容器中的Bean对象。

	3)如何控制对象创建的模式？
		默认支持singleton和prototype两种模式，默认是singleton模式。可以通过<bean>的scope属性修改。(以后可以在web程序中，通过扩展可以使用request，session等值)

	4)Bean对象创建的时机
		singleton模式的Bean组件是在容器实例化时创建；prototype模式的Bean组件是在调用getBean方法时创建。
		singleton模式可以利用<bean>的lazy-init属性设为"true"将对象创建工作推迟到getBean方法。也可以在<beans>中使用default-lazy-init="true"来控制所有的singleton模式下的Bean组件。

	5)为Bean对象指定初始化和销毁方法
		可以利用<bean>元素的init-method属性指定初始化方法；利用destroy-method属性指定销毁方法。
		指定的初始化方法是在构造方法调用后自动执行。
		指定的销毁方法是在容器close时触发，而且只适用于singleton模式组件。

4、Spring框架IOC特性
	1)IOC概念
		Inverse of Controller被称为控制反转或反向控制。
		所谓的控制指的是负责对象关系的指定、对象创建、初始化和销毁等逻辑。
		IOC指的是将控制逻辑交给第三方框架或者容器负责，当两个组件之间的关系发生改变，只需要修改框架或者容器配置即可。
		IOC主要解决的是两个组件对象调用问题，可以以低耦合方式建立使用关系。
	2)DI概念
		Dependency Injection依赖注入。
		Spring框架采用DI技术实现了IOC控制思想。Spring提供了两种注入方法：
			a、setter方式注入
				依靠set方法，将组件对象传入
				--首先添加属性变量和setter方法
				--之后在<bean>定义部分采用下面描述方法
					<property name="属性名" ref="要注入的对象的id值">
					例如：
						<bean id="jdbcCostDAO" class="dao.impl.JdbcCostDAO"
							scope="singleton" init-method="myinit" destroy-method="mydestroy">
						</bean>
						<bean id="hibernateCostDAO" class="dao.impl.HibernateCostDAO">
						</bean>
						<bean id="costAction" class="action.CostAction" scope="prototype">
							<!-- 利用setCostDAO方法接收jdbcCostDAO对象给action中的costDAO -->
							<property name="costDAO" ref="hibernateCostDAO"></property>
						</bean>
			b、构造方式注入
				依靠构造方法，将组件对象传
					--在需要注入的组件中，添加带参数的构造方法
					--在该组件的<bean>定义中，使用下面格式描述
						<!-- index表示第index个参数使用构造方式注入，如果需要注入多个参数，可以多次使用下列配置，index依次对应 -->
						<constructor-arg index="参数索引从0开始" ref="要注入的对象的id值">
						</constructor-arg>

5、Spring各种类型数据的注入(Spring_01/src/dao/MessageBean.java)
	Spring可以为对象注入以下类型的数据：
		1)Bean对象注入
			<property name="属性" ref="要注入的Bean对象id"></property>

		2)基本类型数据的注入(Spring_01/src/dao/MessageBean.java)
			例如字符串、数值等
			<property name="属性" value="要注入的值"></property>

		3)集合类型数据的注入
			List,Set,Map,Properties等类型的注入

6、AOP概念
	Aspect Oriented	Programming被称为面向方面编程。OOP是面向对象编程，AOP是以OOP为基础，OOP主要关注的是对象，如何抽象和封装对象。AOP主要关注的是方面，方面组件可以以低耦合方式切入到其他某一批目标对象方法中。

	AOP主要解决共通处理和目标组件之间的解耦问题。

	1)AOP相关概念
		a、方面(Aspect)
			指的是封装了共通处理的功能组件，该组件可以作用到某一批目标组件的方法上。

		b、切入点(Pointcut)----可见
			指的是用于指定目标组件的表达式。指的是方面组件和哪一批目标组件方法有关系。

		c、连接点(JoinPoint)----不可见
			切入点是连接点的集合。指的是方面组件和具体哪一个目标组件的方法有关系。

		d、通知(Advice)
			用于指定方面组件和目标组件方法之间的作用时机。例如：先执行方面组件再执行目标方法；或者先执行目标方法再执行方面组件。

		e、目标(Target)
			利用切入点指定的组件和方法。

		f、动态代理(AutoProxy)
			Spring采用了动态代理技术实现了AOP机制。
			当使用了AOP之后，从容器getBean中获取的目标组件，返回的是一个动态生成的代理类。然后通过代理类执行业务方法，代理类负责调用方面组件功能和原目标组件方法。
			Spring提供了下面两种动态代理技术实现。
				--采用了CGLIB技术实现
					(目标组件没有接口采用此方法)
					public class 代理类 extends 原目标类型{}

				--采用JDK Proxy API实现
					(目标组件有接口采用此方法)
					public class 代理类 implements 原目标接口

7、通知类型
	通知决定方面组件和目标组件作用的关系。主要有以下几种类型通知：
		1)前置通知<aop:before>
			方面组件在目标方法之前执行。

		2)后置通知<aop:after-returning>				
			方面组件在目标方法之后执行，目标方法没有抛出异常才执行。如果有异常抛出，方面组件不执行。

		3)最终通知<aop:after>
			方面组件在目标方法之后执行。目标方法有没有异常都会执行。

		4)异常通知<aop:after-throwing>
			方面组件在目标方法抛出异常后执行。

		5)环绕通知<aop:round>
			方面组件在目标方法之前和之后执行。即前置+后置


		try{
			//前置通知执行时机<aop:before>
			//目标方法
			//后置通知执行时机<aop:after-returning>
		}catch(...){
			//异常通知执行时机<aop:after-throwing>
		}finally{
			//最终通知执行时机<aop:after>
		}

8、切入点
	切入点用于指定目标组件和方法。
	Spring提供了多种表达式写法：
		1)方法限定表达式：指定哪些方法启用方面组件。
			execution(修饰符? 返回类型 方法名(参数列表) throws 异常?)
			示例1：匹配容器中所有public修饰的方法
				execution(public * *(..))

			示例2：匹配容器中以set开头的方法
				execution(* set*(..))

			示例3：匹配CostDAO类中所有方法
				execution(* dao.CostDAO.*(..))

			示例4：匹配dao包下所有类所有方法(不包括子包)
				execution(* dao.*.*(..))

			示例5：匹配dao包及其子包中所有类所有方法(包括子包)
				execution(* dao..*.*(..))

		2)类型限定表达式：指定哪些类型的组件的所有方法启用方面组件。
			within(类型)
			示例1：匹配service包下的所有类所有方法
				within(com.xyz.service.*)

			示例2：匹配service包及其子包下的所有类所有方法
				within(com.xyz.service..*)

		3)Bean名称限定：按照<bean>元素的id指进行匹配
			bean(id值)
			示例1：匹配id=costDao的bean对象
				bean(costDao)

			示例2：匹配所有id值以Dao结尾的bean对象
				bean(*Dao)

		4)args参数限定表达式：按照方法参数类型限定匹配
			args(类型)

			示例1：匹配方法只有一个参数，并且类型符合Serializable的方法
				args(java.io.Serializable)

			注意：上述表达式可以使用&&，||运算符进行结合

===============================================================

1、利用AOP实现异常处理，将异常信息写入文件
	方面：将异常写入文件
	切入点：作用到所有Action业务方法上
		within(action..*)
	通知：异常通知<aop:after-throwing />

2、log4j日志记录工具
	log4j主要用于日志信息的输出。可以将信息分级别按不同方式和格式输出。
	1)log4j主要有以下3部分组件构成
		a、日志器(Logger)
			负责控制消息输出，提供了各种不同级别的输出方法。
		b、输出器(Appender)
			负责控制消息输出的方式，例如输出到控制台、文件输出等。
		c、布局器(Layout)
			负责控制消息的输出格式。

	2)log4j使用方法
		a、引入log4j.jar
		b、在src下添加log4j.properties(定义了消息输出级别、采用哪种输出器、采用哪种布局器)
		c、在Java代码中利用日志器的不同的方法输出消息

3、	Spring注解配置(Spring_02)
	Spring注解技术从JDK1.5开始推出，之后很多框架开始提供注解配置形式。
	注解只能用在类定义前、方法定义前、成员变量之前。
	Spring框架从2.5版本开始支持注解配置。注解配置优点：简单快捷。
		1)组件扫描功能
			Spring可以按指定的包路径扫描内部的组件，当发现组件类定义前有以下的注解标记，会将该组件纳入Srping容器中。
			a、@Component	(其他组件)
			b、@Controller	(Action组件)
			c、@Service		(Service组件)
			d、@Repository	(DAO组件)

			组件扫描使用方法如下：
				--在applicationConetext.xml中开启组件扫描配置
				--在要扫描的组件的类定义前使用上述注解标记即可

			注意：
				(1)、上述标记将组件扫描到容器后，id属性默认是类名且首字母小写，如果需要自定义id值，可以在类定义处使用@Repository("自定义id值")，在getBean的时候就要使用该自定义的id值。
				(2)、默认采用singleton模式创建Bean对象，如果需要改变，可以使用@Scope("prototype")定义
				(3)、@PostConstruct //等价于init-method属性定义
				(4)、@PreDestroy	//等价于destroy-method属性定义

		2)如果容器中有两个Bean对象之间具有注入关系，可以采用下面注解标记：
			a、@Resource
				默认按类型匹配注入，如果需要指定名称，可以采用@Resource(name="需要注入的bean对象id值")
			b、@Autowired
				默认按类型匹配注入，如果需要指定名称，可以采用
					@Autowired
					@Qualifier("需要注入的bean对象id值")

		3)AOP注解
			AOP注解配置的使用方法：
				--在applicationContext.xml中启用AOP注解
					<aop:aspectj-autoproxy />
				--在方面组件中，使用下面注解标记
					(1)、先使用@Component标记将组件扫描到Spring容器
					(2)、然后使用@Aspect将组件定义为方面组件
					(3)、之后定义一个空方法，在方法前使用@Pointcut定义切入点表达式
					(4)、最后在方面组件的处理前使用@Around，@Before，@AfterReturning，@AfterThrowing，@After标记来定义通知