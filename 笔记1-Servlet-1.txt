1、B/S架构（了解）
	(1)什么是B/S架构？
		客户端使用浏览器，服务端使用web服务器，客户端与服务器端之间使用http协议进行通讯
	(2)优点
		a、客户端不需要单独安装，使用浏览器
			C/S架构，比较麻烦的是需要单独安装每个客户端，并且，一旦客户端发生改变，就需要再次安装
		b、开发相对简单
			C/S架构，需要我们分别在客户端与服务器端编写相对的通信处理模块和自定义协议，而B/S架构使用标准的http协议，不再需要自定义模块，并且，浏览器与web服务器已经包含了响应的通信模块了。


2、Servlet
什么是servlet？
	sun公司制定的一种用来扩展web服务器功能的组件规范
	(1)扩展web服务器功能
		早期的web服务器(比如apache web server、微软的iis)只能够处理静态资源(即需要事先将html写好)，不能够处理动态资源的请求(即需要依据请求参数然后进行计算，生成相应的页面)。
		为了让这些web服务器能够处理动态资源的请求，需要扩展他们的功能。
		早期使用的是cgi技术(common gateway interface)，可以使用很多语言，比如perl，c等来开发cgi技术，但是cgi技术有几个问题，比如开发比较复杂(因为需要程序员自己去分析请求参数)、性能不佳(因为当web服务器收到请求后会启动cgi进程来处理请求)，
		还有cgi程序依赖平台，可移植性不好。

		现在使用servlet：web服务器会向servlet容器发送请求，servlet容器负责解析请求数据包，当然，也包括网络通讯相关的一些处理，然后将解析之后的数据交给servlet来处理。

	(2)组件规范
		a、组件：符合一定规范，并且实现部分功能的软件模块。组件必须要部署到容器里面才能运行。
		b、容器：符合一定规范，并且提供组件的运行环境的程序。

3、Tomcat：是一个Servlet容器
	(1)、下载，解压
	(2)、配置环境变量
		CATALINA_HOME：Tomcat解压目录
		Tomcat_HOME：Tomcat解压目录
		PATH：;%CATALINA_HOME%\bin;%CATALINA_HOME%\lib
	(3)、启动
		cd 到Tomcat目录
		startup/startup.bat
	(4)、停止
		cd 到Tomcat目录
		shutdown/shutdown.bat

4、如何写servlet
	步骤:
		(1)、先写一个java类，实现Servlet接口或者继承HttpServlet抽象类
		(2)、编译
		(3)、打包
			即创建一个具有如下结构的文件夹
				appname(应用名)
					WEB-INF
						classes文件夹(.class文件)
						lib文件夹(.jar, .lib文件夹可选)
						web.xml(部署描述文件 url-pattern)
		(4)、部署
			将(3)创建的文件夹拷贝到servlet容器特定的文件夹下面。
			注意，也可以将(3)创建的文件夹使用jar命令进行压缩，生成.war为后缀的文件，然后拷贝。
		(5)、启动servlet容器，访问servlet
			http://ip:port/appname/url-pattern


5、使用Eclipse/MyEclipse实现servlet
	HelloWorldServlet.java
	public class HelloWorldServlet extends HttpServlet {
		
		//方法名必须为service
		public void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException{
			//设置一个消息头content-type，告诉浏览器返回的数据类型是一个html文档。
			response.setContentType("text/html");
			
			//获得输出流，通过响应
			PrintWriter out = response.getWriter();
			
			out.println("<span style='color:red;font-size:30px;'>" + "Hello World</span>");
			out.close();
		}
	}
	
	web.xml中的部署：
	<servlet>
	  	<servlet-name>helloWorld</servlet-name>
	  	
	  	<!--servlet-class中类名要完整，包名和类名必须有-->
	  	<servlet-class>web.HelloWorldServlet</servlet-class>
	  </servlet>
	  
	  <servlet-mapping>
	  	<servlet-name>helloWorld</servlet-name>
	  	
	  	<!--url-pattern中必须使用/-->
	  	<url-pattern>/hello</url-pattern>
	  </servlet-mapping>

	访问地址：http://localhost:8080/Web1/hello

6、servlet是如何运行的？
	比如在浏览器地址栏输入http://ip:port/appname/url-pattern
	(1)、浏览器依据ip，port建立与servlet容器之间的连接。
	(2)、浏览器将请求数据包(即按照http协议的要求，将相关数据封装成一个数据包，一般称之为请求数据包)，并发送给servlet容器。
	(3)、servlet容器解析请求数据包，并将解析之后得到的数据放到request对象上。同时，容器还要创建一个response对象。
	(4)、servlet容器依据请求资源路径(即/appname/url-pattern)找到servlet的配置，然后创建servlet对象。
	(5)、容器接下来调用servlet对象的service方法，并且会将事先创建好的request对象和response对象作为service方法的参数传递给servlet对象。
	(6)、servlet可以通过request对象获得请求参数，进行对应的处理，然后将处理结果写到response对象上。
	(7)、容器读取rsoponse对象上的数据，然后将处理结果打包(响应数据包),并发送给浏览器。
	(8)、浏览器解析响应数据包，将返回的数据显示在浏览器上。

7、常见错误及解决方式
	(1)、404
		404是一个状态码(是一个三位数，由服务器发送给浏览器，告诉浏览器是否正确地处理了请求)，404的意思是说，服务器依据请求资源路径，找不到对应的资源。
		解决：
			a、依据http://ip:port/appname/url-pattern检查请求地址是否正确。
			b、仔细检查web.xml，特别要检查servlet-name是否一致。
	(2)、500
		500的意思是说，服务器处理出错，一般是因为程序运行出错。
		解决：
			a、检查程序的代码
			b、检查web.xml，类名要填写正确
	(3)、405
		服务器找不到对应的service方法。
		解决：
			检查service方法的签名(方法名，参数类型，返回类型，异常类型)
		public void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException{}